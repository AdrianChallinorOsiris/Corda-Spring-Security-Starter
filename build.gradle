buildscript {
    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion")
        thymeleaf_version = constants.getProperty("thymeleafVersion")

        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.1.1.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

apply from: 'repositories.gradle'

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.corda.plugins.quasar-utils'

configurations {
    compile {
        // We want to use SLF4J's version of these bindings: jcl-over-slf4j
        // Remove any transitive dependency on Apache's version.
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    compile "$corda_release_group:corda-core:$corda_release_version"
    compile "$corda_release_group:corda-rpc:$corda_release_version"
    runtime "$corda_release_group:corda:$corda_release_version"

    // SPRING
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version")
    compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version")
    //compile("org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version")
    compile("org.springframework.boot:spring-boot-starter-security:$spring_boot_version")

    compile group: 'org.thymeleaf', name: 'thymeleaf-spring5', version: '3.0.11.RELEASE'
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5', version: '3.0.4.RELEASE'

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.3.61'

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task runServer(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'uk.co.osiris.server.ServerKt'
}

jar {
  manifest {
    attributes('Main-Class': 'uk.co.osiris.server.Serverkt')
  }
}

